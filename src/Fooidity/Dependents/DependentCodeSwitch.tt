<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly  name="System.Core" #>
<#@ import namespace="System.Linq" #>
namespace Fooidity.Dependents
{
    using System;
    using CodeSwitches;
    using Contracts;
<# for(int i=1; i<=16; i++){
    var tActionArgs = String.Join(", ",Enumerable.Range(1,i).Select(it=>String.Format("T{0}",it)));
#>

    public class DependentCodeSwitch<T, <#=tActionArgs#>> :
        ICodeSwitch<T, <#=tActionArgs#>>
        where T : struct, ICodeFeature
        <#= String.Join(Environment.NewLine + "        ", Enumerable.Range(1, i).Select(x => String.Format("where T{0} : struct, ICodeFeature", x))) #>
    {
        readonly Lazy<bool> _enabled;
        readonly CodeSwitchEvaluatedObservable<T> _evaluated;
        <#= String.Join(Environment.NewLine + "        ", Enumerable.Range(1, i).Select(x => String.Format("readonly ICodeSwitch<T{0}> _codeSwitch{0};", x))) #>

        public DependentCodeSwitch(<#= String.Join(", ", Enumerable.Range(1, i).Select(x => String.Format("ICodeSwitch<T{0}> codeSwitch{0}", x))) #>)
        {
            _evaluated = new CodeSwitchEvaluatedObservable<T>();
            _enabled = new Lazy<bool>(Evaluate);

            <#= String.Join(Environment.NewLine + "            ", Enumerable.Range(1, i).Select(x => String.Format("_codeSwitch{0} = codeSwitch{0};", x))) #>
        }

        public bool Enabled
        {
            get { return _enabled.Value; }
        }

        public IDisposable Subscribe(IObserver<ICodeSwitchEvaluated> observer)
        {
            return _evaluated.Connect(observer);
        }

        bool Evaluate()
        {
            bool enabled = GetEnabled();

            _evaluated.Evaluated(enabled);

            return enabled;
        }

        bool GetEnabled()
        {
            return <#= String.Join(" && ", Enumerable.Range(1, i).Select(x => String.Format("_codeSwitch{0}.Enabled", x))) #>;
        }
        <# for(int j = 1; j <= i; j++) { 
        #>

        public ICodeSwitch<T<#=j#>> Switch<#=j#>
        {
            get { return _codeSwitch<#=j#>; }
        }
<# } #>
    }
<# } #>

}